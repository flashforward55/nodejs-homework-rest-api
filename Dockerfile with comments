# #Node.js + node_modules + project files + start project command => Docker image => Docker container => START

# команда "docker help" в терміналі виведе всі доступні команди docker
# команда "docker images" в терміналі виведе всі доступні images

# #Команди для опису файлу Dockerfile:
# FROM programName- встановити програму (наприклад Node.js)
# WORKDIR dirName - створити папку
# COPY fromDirName toDirName - скопіювати файли з папки fromDirName в папку toDirName (. - корінь проєкту (поточного), . - робоча папка проєкту)
# EXPOSE port - вказати порт на якому запускати проєкт
# CMD ["firstWord", "secondtWord", ... "nthWord"] - запустити проєкт командою, киконавши команду "firstWord secondtWord ... nthWord" (Кожне слово команди запуску має бути окремим елементом масиву. Роздільником для слів вважається пробіл. В нашому випадку це буде ["node", "server"], а якби головний файл проєкту був би не у корені, а наприклад в папці bin, то запис мав би вигляд ["node", "bin/server"]) 

# #А - Описуємо Dockerfile:
# 1 - "FROM node" - піде на docker hub, знайде в images node.js, скачає і встановить 
# 2 - "WORKDIR /app" - створить робочу папку проєкту
# 3 - "COPY . ." - скопіює файли проєкту в робочу папку проєкту
# 4 - "RUN npm install" - поставить пакети з package.json
# 5 - "EXPOSE 3000" - вказує порт на якому запускати проєкт
# 6 - "CMD ['node', "server"]"- запустить проєкт (виконає команду "node server" в терміналі)

FROM node

WORKDIR /app

COPY . .

RUN npm install

EXPOSE 3000

CMD ["node", "server"]


# #B - Створюємо Docker image - команда "docker build ." в терміналі (після закінчення опису фалу Dockerfile).

# #С - Створюємо Docker container (розпаковуємо Docker image) і запускаємо проєкт - команда "docker run imageID" в терміналі (imageID - можна знайти в візуальному інтерфейсі docker desktop або подивитись в терміналі за доп. команди "docker images")

# !!!УВАГА!!! - Docker image не можна змінити. При оновленні Dockerfile старий image видаляється і створюється новий.

# !!!УВАГА!!! - Після створення Docker container і запуску проєкту термінал буде заблокований, оскільки по суті наш термінал перекидає в тремінал Docker контейнера.

# #D - Для виходу треба зупинити проєкт через візуальний інтерфейс docker desktop або створити новий термінал і виконати в ньому команду "docker stop containerId" (containerId - можна знайти в візуальному інтерфейсі docker desktop або подивитись в терміналі за доп. команди "docker ps", яка показує усі запущені контейнери).

# #E - Для перезапуску Docker container - команда "docker start containerId" в терміналі.

# #F - Для створення і запуску Docker container БЕЗ ПЕРЕХОДУ В ТЕРМІНАЛ контейнера - команда "docker run -d imageID" в терміналі.

# !!!УВАГА!!! - команди "docker run imageID" та "docker run -d imageID" не перезапускає інстуючий констейнер, а створює новий.

# #G - Для доступу до сервера, який запускається через Docker container потрібно вказата 2 порти: зовнішній (віртуального серверу VPS або локальному на нашому ПК) і внутрішній (порт Docker container). Це робиться командою "docker run -d -p 4000:3000 imageID" в терміналі. Умовно це означає, що порт контейнера 3000 буде працювати на 4000 порту серсеру VPS або локального ПК - наш проєкт буде доступний на 400 порту.
